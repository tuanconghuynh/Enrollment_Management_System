# app/routers/applicants.py
from __future__ import annotations

import io, re, os, hmac, json, hashlib
from datetime import datetime, date
from typing import Optional

from fastapi import APIRouter, Depends, HTTPException, Query, Body, status, Request, Response
from fastapi.responses import StreamingResponse
from sqlalchemy import or_, and_, func
from sqlalchemy.orm import Session
from sqlalchemy.exc import IntegrityError

from app.db.session import get_db
from app.models.applicant import Applicant, ApplicantDoc
from app.models.checklist import ChecklistItem, ChecklistVersion
from app.routers.auth import require_roles
from app.services.audit import write_audit

from app.utils.soft_delete import exclude_deleted

try:
    from app.schemas.applicant import ApplicantIn, ApplicantOut
except Exception:
    ApplicantIn = dict  # type: ignore
    ApplicantOut = dict  # type: ignore


router = APIRouter(prefix="/applicants", tags=["Applicants"])

# ====== L√Ω do c·∫≠p nh·∫≠t (preset) ======
UPDATE_REASON_CHOICES = {
    "capnhat_thongtin": "C·∫≠p nh·∫≠t th√¥ng tin h·ªçc vi√™n",
    "capnhat_hoso_moi": "C·∫≠p nh·∫≠t h·ªì s∆° m·ªõi",
    "bosung_hoso": "B·ªï sung h·ªì s∆°",
    "capnhat_chungchi": "C·∫≠p nh·∫≠t ch·ª©ng ch·ªâ",
    "chinhsua_hoso": "Ch·ªânh s·ª≠a h·ªì s∆°",
    "khac": "L√Ω do kh√°c",
}


def _validate_update_reason(data) -> str:
    """
    H·ªó tr·ª£ 2 ki·ªÉu truy·ªÅn t·ª´ FE:
      1) update_reason: {"key": "...", "text": "..."}  # chu·∫©n
      2) update_reason_key="...", update_reason_text="..."  # t∆∞∆°ng th√≠ch c≈©
    Tr·∫£ v·ªÅ chu·ªói m√¥ t·∫£ l√Ω do ƒë√£ h·ª£p l·ªá, ho·∫∑c raise HTTPException(400).
    """
    from fastapi import HTTPException

    key = None
    text = None

    if isinstance(data, dict):
        key = (data.get("key") or "").strip()
        text = (data.get("text") or "").strip()
    elif isinstance(data, str):
        key = data.strip()
    elif data is None:
        pass

    if not key:
        raise HTTPException(400, "Thi·∫øu l√Ω do c·∫≠p nh·∫≠t (update_reason.key).")

    label = UPDATE_REASON_CHOICES.get(key)
    if not label:
        raise HTTPException(400, "L√Ω do c·∫≠p nh·∫≠t kh√¥ng h·ª£p l·ªá.")

    if key == "khac":
        if not text:
            raise HTTPException(400, "Vui l√≤ng nh·∫≠p n·ªôi dung cho 'L√Ω do kh√°c'.")
        label = f"L√Ω do kh√°c: {text}"

    return label


# ================= Helpers =================
DATE_DMY = re.compile(r"^(\d{1,2})[\/\-](\d{1,2})[\/\-](\d{4})$")
DATE_YMD = re.compile(r"^(\d{4})-(\d{2})-(\d{2})$")
MSSV_REGEX = re.compile(r"^\d{10}$")

DELETE_KEY_SECRET = os.getenv("DELETE_KEY_SECRET", "delete-dev")


def verify_delete_key(key: str) -> bool:
    """
    X√°c th·ª±c key x√≥a: HMAC-SHA256("ALLOW_DELETE", DELETE_KEY_SECRET).
    """
    digest = hmac.new(DELETE_KEY_SECRET.encode(), b"ALLOW_DELETE", hashlib.sha256).hexdigest()
    return hmac.compare_digest(key or "", digest)


def ensure_mssv(v: str):
    if not MSSV_REGEX.fullmatch(v or ""):
        raise HTTPException(status_code=422, detail="MSSV ph·∫£i g·ªìm ƒë√∫ng 10 ch·ªØ s·ªë.")


def _parse_date_flexible(v: Optional[object]) -> Optional[date]:
    if v in (None, ""):
        return None
    if isinstance(v, date) and not isinstance(v, datetime):
        return v
    if isinstance(v, datetime):
        return v.date()
    s = str(v).strip()
    if not s:
        return None
    m = DATE_DMY.match(s)
    if m:
        d, mth, y = map(int, m.groups())
        return date(y, mth, d)
    m = DATE_YMD.match(s)
    if m:
        y, mth, d = map(int, m.groups())
        return date(y, mth, d)
    try:
        return datetime.fromisoformat(s).date()
    except Exception:
        return None


def _to_dmy(v: Optional[object]) -> Optional[str]:
    d = _parse_date_flexible(v)
    return f"{d.day:02d}/{d.month:02d}/{d.year:04d}" if d else None


def _to_iso(v: Optional[object]) -> Optional[str]:
    if v is None or v == "":
        return None
    if isinstance(v, datetime):
        return v.isoformat()
    if isinstance(v, date):
        return datetime.combine(v, datetime.min.time()).isoformat()
    d = _parse_date_flexible(v)
    return datetime.combine(d, datetime.min.time()).isoformat() if d else None


# üÜï Chu·∫©n h√≥a gi·ªõi t√≠nh
def _normalize_gender(v):
    if v is None:
        return None
    s = str(v).strip().lower()
    if s in {"nam", "m", "male", "1", "true"}:
        return "Nam"
    if s in {"n·ªØ", "nu", "f", "female", "0", "false"}:
        return "N·ªØ"
    # n·∫øu FE g·ª≠i "Nam"/"N·ªØ"/kh√°c ƒë√∫ng √Ω th√¨ gi·ªØ nguy√™n
    return v


def snapshot_applicant(a: Applicant) -> dict:
    """Ch·ª•p nhanh b·∫£n ghi ƒë·ªÉ ghi audit (prev/new)."""
    if not a:
        return {}

    def iso(d):
        if not d:
            return None
        if isinstance(d, datetime):
            return d.isoformat()
        if isinstance(d, date):
            return datetime.combine(d, datetime.min.time()).isoformat()
        return str(d)

    return {
        "ma_so_hv": a.ma_so_hv,
        "ma_ho_so": a.ma_ho_so,
        "ho_ten": a.ho_ten,
        "email_hoc_vien": getattr(a, "email_hoc_vien", None),
        "ngay_nhan_hs": iso(a.ngay_nhan_hs),
        "ngay_sinh": iso(a.ngay_sinh),
        "so_dt": a.so_dt,
        # tr·∫£ v·ªÅ theo key nganh_nhap_hoc ‚Äî map c·∫£ khi DB d√πng c·ªôt 'nganh'
        "nganh_nhap_hoc": getattr(a, "nganh_nhap_hoc", None) if hasattr(a, "nganh_nhap_hoc") else getattr(a, "nganh", None),
        "dot": getattr(a, "dot", None),
        "khoa": getattr(a, "khoa", None),
        "da_tn_truoc_do": getattr(a, "da_tn_truoc_do", None),
        "ghi_chu": getattr(a, "ghi_chu", None),
        "nguoi_nhan_ky_ten": getattr(a, "nguoi_nhan_ky_ten", None),
        "status": getattr(a, "status", None),
        "printed": getattr(a, "printed", None),
        "checklist_version_id": getattr(a, "checklist_version_id", None),
        # c√°c c·ªôt soft-delete (n·∫øu c√≥)
        "deleted_at": iso(getattr(a, "deleted_at", None)),
        "deleted_by": getattr(a, "deleted_by", None),
        "deleted_reason": getattr(a, "deleted_reason", None),
        # üÜï gi·ªõi t√≠nh
        "gioi_tinh": getattr(a, "gioi_tinh", None),
        # üÜï d√¢n t·ªôc
        "dan_toc": getattr(a, "dan_toc", None),
    }


# üÜï Helper: l·∫•y map docs {code: so_luong}
def _docs_map(db: Session, mshv: str) -> dict[str, int]:
    rows = db.query(ApplicantDoc).filter_by(applicant_ma_so_hv=mshv).all()
    return {d.code: int(d.so_luong or 0) for d in rows}


# ================= GET by code =================
@router.get("/by-code/{key}")
def get_by_code(
    key: str,
    request: Request,
    db: Session = Depends(get_db),
    me=Depends(require_roles("Admin", "NhanVien", "CongTacVien")),
):
    k = (key or "").strip()
    if not k:
        write_audit(
            db,
            action="READ",
            target_type="Applicant",
            target_id=None,
            status="FAILURE",
            new_values={"reason": "missing key"},
            request=request
        )
        db.commit()
        raise HTTPException(400, "Thi·∫øu m√£ tra c·ª©u")

    a = (
        db.query(Applicant)
        .filter(func.lower(Applicant.ma_ho_so) == k.lower())
        .order_by(Applicant.created_at.desc())
        .first()
    )
    if not a and MSSV_REGEX.fullmatch(k):
        a = db.query(Applicant).filter(Applicant.ma_so_hv == k).first()
    if not a:
        a = (
            db.query(Applicant)
            .filter(Applicant.ma_ho_so.ilike(f"%{k}%"))
            .order_by(Applicant.created_at.desc())
            .first()
        )

    if not a:
        write_audit(db, action="READ", target_type="Applicant", target_id=k, status="FAILURE", request=request)
        db.commit()
        raise HTTPException(404, "Not Found")

    # Ch·∫∑n h·ªì s∆° ƒë√£ xo√° m·ªÅm
    if hasattr(Applicant, "deleted_at") and getattr(a, "deleted_at", None):
        raise HTTPException(410, "H·ªì s∆° ƒë√£ b·ªã xo√° t·∫°m.")

    docs = db.query(ApplicantDoc).filter(
        ApplicantDoc.applicant_ma_so_hv == a.ma_so_hv
    ).all()

    def pick(obj, *names):
        for n in names:
            if hasattr(obj, n):
                v = getattr(obj, n)
                if v not in (None, ""):
                    return v
        return None

    applicant_payload = {
        "id": a.ma_so_hv,
        "applicant_id": a.ma_so_hv,
        "ma_so_hv": a.ma_so_hv,
        "ma_ho_so": a.ma_ho_so,
        "ngay_nhan_hs": _to_dmy(a.ngay_nhan_hs),
        "ngay_nhan_hs_iso": _to_iso(a.ngay_nhan_hs),
        "ho_ten": a.ho_ten,
        "email_hoc_vien": getattr(a, "email_hoc_vien", None),
        "ngay_sinh": _to_dmy(a.ngay_sinh),
        "ngay_sinh_iso": _to_iso(a.ngay_sinh),
        "so_dt": a.so_dt,
        "nganh_nhap_hoc": pick(a, "nganh_nhap_hoc", "nganh"),
        "dot": pick(a, "dot", "dot_tuyen"),
        "khoa": pick(a, "khoa", "khoa_hoc", "khoahoc", "nien_khoa"),
        "da_tn_truoc_do": a.da_tn_truoc_do,
        "ghi_chu": a.ghi_chu,
        "nguoi_nhan_ky_ten": pick(a, "nguoi_nhan_ky_ten", "nguoi_nhan", "nguoi_ky"),
        "status": getattr(a, "status", None),
        "printed": getattr(a, "printed", None),
        "checklist_version_id": getattr(a, "checklist_version_id", None),
        # üÜï gi·ªõi t√≠nh
        "gioi_tinh": getattr(a, "gioi_tinh", None),
        # üÜï d√¢n t·ªôc
        "dan_toc": getattr(a, "dan_toc", None),
    }

    write_audit(db, action="READ", target_type="Applicant", target_id=a.ma_so_hv, status="SUCCESS", request=request)
    db.commit()

    return {
        "applicant": applicant_payload,
        "docs": [{"code": d.code, "so_luong": int(d.so_luong or 0)} for d in docs],
    }


@router.get("/by-mshv/{ma_so_hv}")
def get_by_mshv(
    ma_so_hv: str,
    request: Request,
    db: Session = Depends(get_db),
    user=Depends(require_roles("Admin", "NhanVien", "CongTacVien")),
):
    key = (ma_so_hv or "").strip()
    if not key:
        write_audit(db, action="READ", target_type="Applicant", target_id=None, status="FAILURE", request=request)
        db.commit()
        raise HTTPException(status_code=400, detail="Thi·∫øu MSHV")

    a = db.query(Applicant).filter(func.lower(Applicant.ma_so_hv) == key.lower()).first()
    if not a:
        a = db.query(Applicant).filter(Applicant.ma_so_hv.ilike(f"%{key}%")).first()
    if not a:
        write_audit(db, action="READ", target_type="Applicant", target_id=key, status="FAILURE", request=request)
        db.commit()
        raise HTTPException(status_code=404, detail="Not Found")

    # Ch·∫∑n h·ªì s∆° ƒë√£ xo√° m·ªÅm
    if hasattr(Applicant, "deleted_at") and getattr(a, "deleted_at", None):
        raise HTTPException(410, "H·ªì s∆° ƒë√£ b·ªã xo√° t·∫°m.")

    docs = db.query(ApplicantDoc).filter(
        ApplicantDoc.applicant_ma_so_hv == a.ma_so_hv
    ).all()

    def pick(*names):
        for n in names:
            if hasattr(a, n):
                v = getattr(a, n)
                if v not in (None, ""):
                    return v
        return None

    def _to_dmy2(v):
        if not v:
            return None
        if isinstance(v, datetime):
            v = v.date()
        if isinstance(v, date):
            return f"{v.day:02d}/{v.month:02d}/{v.year:04d}"
        try:
            return datetime.fromisoformat(str(v)).strftime("%d/%m/%Y")
        except Exception:
            return str(v)

    def _to_iso2(v):
        if not v:
            return None
        if isinstance(v, datetime):
            return v.isoformat()
        if isinstance(v, date):
            return datetime.combine(v, datetime.min.time()).isoformat()
        try:
            d = datetime.fromisoformat(str(v))
            return d.isoformat()
        except Exception:
            return None

    applicant_payload = {
        "id": a.ma_so_hv,
        "applicant_id": a.ma_so_hv,
        "ma_ho_so": a.ma_ho_so,
        "ngay_nhan_hs": _to_dmy2(a.ngay_nhan_hs),
        "ngay_nhan_hs_iso": _to_iso2(a.ngay_nhan_hs),
        "ngay_sinh": _to_dmy2(a.ngay_sinh),
        "ngay_sinh_iso": _to_iso2(a.ngay_sinh),
        "ho_ten": a.ho_ten,
        "ma_so_hv": a.ma_so_hv,
        "so_dt": a.so_dt,
        "nganh_nhap_hoc": pick("nganh_nhap_hoc", "nganh"),
        "dot": pick("dot", "dot_tuyen"),
        "khoa": pick("khoa", "khoa_hoc", "khoahoc", "nien_khoa"),
        "da_tn_truoc_do": a.da_tn_truoc_do,
        "ghi_chu": a.ghi_chu,
        "nguoi_nhan_ky_ten": pick("nguoi_nhan_ky_ten", "nguoi_nhan", "nguoi_ky"),
        "status": getattr(a, "status", None),
        "printed": getattr(a, "printed", None),
        "checklist_version_id": getattr(a, "checklist_version_id", None),
        "email_hoc_vien": getattr(a, "email_hoc_vien", None),
        # üÜï gi·ªõi t√≠nh
        "gioi_tinh": getattr(a, "gioi_tinh", None),
        # üÜï d√¢n t·ªôc
        "dan_toc": getattr(a, "dan_toc", None),
    }

    write_audit(db, action="READ", target_type="Applicant", target_id=a.ma_so_hv, status="SUCCESS", request=request)
    db.commit()

    return {
        "applicant": applicant_payload,
        "docs": [{"code": d.code, "so_luong": int(d.so_luong or 0)} for d in docs],
    }


# ================= CREATE =================
@router.post("", status_code=201)
@router.post("/", status_code=201)
def create_applicant(
    request: Request,
    payload: dict = Body(...),  # d√πng dict ƒë·ªÉ t·ª± parse, tr√°nh 422 c·ªßa Pydantic
    db: Session = Depends(get_db),
    me=Depends(require_roles("Admin", "NhanVien", "CongTacVien")),
):
    version_name = (payload.get("checklist_version_name") or "").strip() or "v1"
    v = db.query(ChecklistVersion).filter(
        ChecklistVersion.version_name == version_name
    ).first()
    if not v:
        write_audit(
            db,
            action="CREATE",
            target_type="Applicant",
            target_id=None,
            status="FAILURE",
            new_values={"reason": "Checklist version not found", "version": version_name},
            request=request,
        )
        db.commit()
        raise HTTPException(400, "Checklist version kh√¥ng t·ªìn t·∫°i")

    ma_so_hv = (payload.get("ma_so_hv") or "").strip()
    ensure_mssv(ma_so_hv)

    ma_ho_so = (payload.get("ma_ho_so") or "").strip()
    ho_ten = (payload.get("ho_ten") or "").strip()
    ngay_nhan_hs = _parse_date_flexible(payload.get("ngay_nhan_hs"))

    if not ma_ho_so:
        raise HTTPException(422, "Thi·∫øu tr∆∞·ªùng b·∫Øt bu·ªôc: M√£ H·ªì S∆°")
    if not ho_ten:
        raise HTTPException(422, "Thi·∫øu tr∆∞·ªùng b·∫Øt bu·ªôc: H·ªç V√† T√™n")
    if not ngay_nhan_hs:
        raise HTTPException(422, "Thi·∫øu tr∆∞·ªùng b·∫Øt bu·ªôc: Ng√†y nh·∫≠n h·ªì s∆° (dd/MM/YYYY ho·∫∑c YYYY-MM-DD)")

    existed_mssv = db.query(Applicant).filter(Applicant.ma_so_hv == ma_so_hv).first()
    if existed_mssv:
        raise HTTPException(409, "M√£ s·ªë h·ªçc vi√™n ƒë√£ t·ªìn t·∫°i!")

    # ‚úÖ ch·∫•p nh·∫≠n c·∫£ 'nganh_nhap_hoc' (m·ªõi) ho·∫∑c 'nganh' (c≈©)
    _nganh_val = (payload.get("nganh_nhap_hoc") or payload.get("nganh") or None)

    a = Applicant(
        ma_so_hv=ma_so_hv,
        ma_ho_so=ma_ho_so,
        ngay_nhan_hs=ngay_nhan_hs,
        ho_ten=ho_ten,
        email_hoc_vien=payload.get("email_hoc_vien"),
        ngay_sinh=_parse_date_flexible(payload.get("ngay_sinh")),
        so_dt=payload.get("so_dt"),
        dot=payload.get("dot"),
        khoa=payload.get("khoa"),
        da_tn_truoc_do=payload.get("da_tn_truoc_do"),
        ghi_chu=payload.get("ghi_chu"),
        nguoi_nhan_ky_ten=(getattr(me, "full_name", None) or getattr(me, "username", None)),
        checklist_version_id=v.id,
        status="saved",
        printed=False,
        # üÜï gi·ªõi t√≠nh
        gioi_tinh=_normalize_gender(payload.get("gioi_tinh")),
        # üÜï d√¢n t·ªôc (n·∫øu model/DB c√≥ c·ªôt)
        **({"dan_toc": payload.get("dan_toc")} if hasattr(Applicant, "dan_toc") else {}),
    )
    # ‚úÖ ghi v√†o ƒë√∫ng c·ªôt hi·ªán c√≥ trong model
    if hasattr(Applicant, "nganh_nhap_hoc"):
        a.nganh_nhap_hoc = _nganh_val
    elif hasattr(Applicant, "nganh"):
        a.nganh = _nganh_val

    prev_snapshot = {}
    db.add(a)
    try:
        db.flush()
    except IntegrityError:
        db.rollback()
        write_audit(
            db,
            action="CREATE",
            target_type="Applicant",
            target_id=ma_so_hv,
            status="FAILURE",
            new_values={"error": "IntegrityError"},
            request=request,
        )
        db.commit()
        raise HTTPException(409, "M√£ s·ªë HV ƒë√£ t·ªìn t·∫°i")

    docs = (payload.get("docs") or [])
    for d in docs:
        code = d.get("code") if isinstance(d, dict) else getattr(d, "code", None)
        sl = d.get("so_luong") if isinstance(d, dict) else getattr(d, "so_luong", None)
        if sl in (None, ""):
            continue
        db.add(ApplicantDoc(applicant_ma_so_hv=a.ma_so_hv, code=code, so_luong=int(sl)))

    db.commit()

    # üÜï Audit CREATE k√®m danh m·ª•c h·ªì s∆°
    docs_after = _docs_map(db, a.ma_so_hv)
    write_audit(
        db,
        action="CREATE",
        target_type="Applicant",
        target_id=a.ma_so_hv,
        prev_values=prev_snapshot,
        new_values={**snapshot_applicant(a), "docs_after": docs_after},
        status="SUCCESS",
        request=request,
    )
    db.commit()

    return {
        "ma_so_hv": a.ma_so_hv,
        "ma_ho_so": a.ma_ho_so,
        "status": a.status,
        "printed": a.printed,
    }


# ================= SEARCH =================
@router.get("/search")
def search_applicants(
    q: Optional[str] = Query(None, description="ƒê·ªÉ tr·ªëng = l·∫•y t·∫•t c·∫£"),
    page: int = Query(1, ge=1),
    size: int = Query(20, ge=1, le=1000),
    db: Session = Depends(get_db),
    me=Depends(require_roles("Admin", "NhanVien", "CongTacVien")),
):
    qn = (q or "").strip() or None

    # B·∫Øt ƒë·∫ßu query
    query = db.query(Applicant)

    # ·∫®n to√†n b·ªô h·ªì s∆° ƒë√£ b·ªã xo√° m·ªÅm (t·ª± ƒë·ªông nh·∫≠n di·ªán c·ªôt)
    query = exclude_deleted(Applicant, query)

    # N·∫øu c√≥ t·ª´ kho√° t√¨m ki·∫øm
    if qn:
        like = f"%{qn}%"
        query = query.filter(
            or_(
                Applicant.ho_ten.ilike(like),
                Applicant.ma_ho_so.ilike(like),
                Applicant.ma_so_hv.ilike(like),
            )
        )

    total = query.count()
    rows = (
        query.order_by(Applicant.created_at.desc())
        .offset((page - 1) * size)
        .limit(size)
        .all()
    )

    return {
        "items": [
            {
                "ma_so_hv": a.ma_so_hv,
                "ma_ho_so": a.ma_ho_so,
                "ho_ten": a.ho_ten,
                "email_hoc_vien": getattr(a, "email_hoc_vien", None),
                "ngay_nhan_hs": a.ngay_nhan_hs.isoformat() if a.ngay_nhan_hs else None,
                "dot": a.dot,
                # ‚úÖ lu√¥n tr·∫£ v·ªÅ theo key 'nganh_nhap_hoc'
                "nganh_nhap_hoc": getattr(a, "nganh_nhap_hoc", None) if hasattr(a, "nganh_nhap_hoc") else getattr(a, "nganh", None),
                "khoa": getattr(a, "khoa", None),
                "nguoi_nhan_ky_ten": getattr(a, "nguoi_nhan_ky_ten", None),
                # üÜï gi·ªõi t√≠nh
                "gioi_tinh": getattr(a, "gioi_tinh", None),
                # üÜï d√¢n t·ªôc
                "dan_toc": getattr(a, "dan_toc", None),
            }
            for a in rows
        ],
        "page": page,
        "size": size,
        "total": total,
    }


# ================= API find theo m√£ h·ªì s∆° (gi·ªØ t∆∞∆°ng th√≠ch) =================
@router.get("/find")
@router.get("/find/")
def find_by_ma_ho_so(
    ma_ho_so: str = Query(...),
    db: Session = Depends(get_db),
    me=Depends(require_roles("Admin", "NhanVien", "CongTacVien")),
):
    code = (ma_ho_so or "").strip()
    a = (
        db.query(Applicant)
        .filter(Applicant.ma_ho_so == code)
        .order_by(Applicant.created_at.desc())   # ch·ªçn b·∫£n m·ªõi nh·∫•t n·∫øu tr√πng
        .first()
    )
    if not a:
        raise HTTPException(404, "Not Found")

    # Ch·∫∑n h·ªì s∆° ƒë√£ xo√° m·ªÅm
    if hasattr(Applicant, "deleted_at") and getattr(a, "deleted_at", None):
        raise HTTPException(410, "H·ªì s∆° ƒë√£ b·ªã xo√° t·∫°m.")

    docs = db.query(ApplicantDoc).filter_by(applicant_ma_so_hv=a.ma_so_hv).all()
    q = db.query(ChecklistItem).filter(ChecklistItem.version_id == a.checklist_version_id)
    q = q.order_by(getattr(ChecklistItem, "order_no", ChecklistItem.id).asc())
    items = q.all()

    return {
        "ma_so_hv": a.ma_so_hv,
        "ma_ho_so": a.ma_ho_so,
        "ngay_nhan_hs": a.ngay_nhan_hs.isoformat() if a.ngay_nhan_hs else None,
        "ho_ten": a.ho_ten,
        "email_hoc_vien": getattr(a, "email_hoc_vien", None),
        "ngay_sinh": (
            a.ngay_sinh if isinstance(getattr(a, "ngay_sinh", None), str)
            else (a.ngay_sinh.isoformat() if getattr(a, "ngay_sinh", None) else None)
        ) if hasattr(a, "ngay_sinh") else None,
        "so_dt": a.so_dt,
        # ‚úÖ map v·ªÅ key chu·∫©n 'nganh_nhap_hoc'
        "nganh_nhap_hoc": getattr(a, "nganh_nhap_hoc", None) if hasattr(a, "nganh_nhap_hoc") else getattr(a, "nganh", None),
        "dot": a.dot,
        "khoa": getattr(a, "khoa", None),
        "da_tn_truoc_do": a.da_tn_truoc_do,
        "ghi_chu": a.ghi_chu,
        "nguoi_nhan_ky_ten": a.nguoi_nhan_ky_ten,
        "docs": [{"code": d.code, "so_luong": int(d.so_luong or 0)} for d in docs],
        "checklist_items": [
            {"code": it.code, "display_name": it.display_name, "order_no": getattr(it, "order_no", 0)}
            for it in items
        ],
        # üÜï gi·ªõi t√≠nh
        "gioi_tinh": getattr(a, "gioi_tinh", None),
        # üÜï d√¢n t·ªôc
        "dan_toc": getattr(a, "dan_toc", None),
    }


# ================= UPDATE (c√≥ l√Ω do) =================
@router.put("/{ma_so_hv}")
def update_applicant(
    ma_so_hv: str,
    request: Request,
    body: dict = Body(...),
    db: Session = Depends(get_db),
    me=Depends(require_roles("Admin", "NhanVien", "CongTacVien")),
):
    ensure_mssv(ma_so_hv)

    a = db.query(Applicant).filter(Applicant.ma_so_hv == ma_so_hv).first()
    if not a:
        raise HTTPException(404, "Applicant not found")

    # üü¶ ki·ªÉm tra l√Ω do c·∫≠p nh·∫≠t (h·ªó tr·ª£ 2 ki·ªÉu truy·ªÅn)
    reason_payload = body.get("update_reason")
    if not isinstance(reason_payload, dict):
        reason_payload = {
            "key": (body.get("update_reason_key") or "").strip(),
            "text": (body.get("update_reason_text") or "").strip(),
        }
    update_reason = _validate_update_reason(reason_payload)

    # snapshot tr∆∞·ªõc khi s·ª≠a
    before = snapshot_applicant(a)
    docs_before = _docs_map(db, a.ma_so_hv)

    def has(k): return k in body
    def get(k, d=None): return body.get(k, d)
    def str_or_none(v):
        if v is None:
            return None
        if isinstance(v, str):
            s = v.strip()
            return s if s else None
        return v

    # Cho ph√©p ƒë·ªïi MSSV (v√† chuy·ªÉn ApplicantDoc t∆∞∆°ng ·ª©ng)
    if has("ma_so_hv"):
        new_mssv = str(get("ma_so_hv") or "").strip()
        if new_mssv and new_mssv != ma_so_hv:
            existed = db.query(Applicant).filter(Applicant.ma_so_hv == new_mssv).first()
            if existed:
                raise HTTPException(409, "MSSV m·ªõi ƒë√£ t·ªìn t·∫°i.")
            a.ma_so_hv = new_mssv
            for d in db.query(ApplicantDoc).filter_by(applicant_ma_so_hv=ma_so_hv).all():
                d.applicant_ma_so_hv = new_mssv
            ma_so_hv = new_mssv

    # ma_ho_so: kh√¥ng cho ph√©p ƒë·ªÉ tr·ªëng
    if has("ma_ho_so"):
        new_code = str(get("ma_ho_so") or "").strip()
        if not new_code:
            raise HTTPException(400, "M√£ HS kh√¥ng ƒë∆∞·ª£c tr·ªëng.")
        a.ma_ho_so = new_code

    # Ng√†y: "" -> None, h·ªó tr·ª£ nhi·ªÅu ƒë·ªãnh d·∫°ng
    if has("ngay_nhan_hs"):
        a.ngay_nhan_hs = _parse_date_flexible(get("ngay_nhan_hs"))
    if has("ngay_sinh"):
        a.ngay_sinh = _parse_date_flexible(get("ngay_sinh"))

    # Text fields: "" -> None (ngo·∫°i tr·ª´ ng√†nh ‚Äì x·ª≠ ri√™ng b√™n d∆∞·ªõi)
    for f in ("ho_ten", "email_hoc_vien", "so_dt", "dot", "khoa", "da_tn_truoc_do", "ghi_chu"):
        if has(f):
            setattr(a, f, str_or_none(get(f)))

    # ‚úÖ Ng√†nh h·ªçc: nh·∫≠n c·∫£ 'nganh_nhap_hoc' ho·∫∑c 'nganh', ghi ƒë√∫ng c·ªôt hi·ªán c√≥
    if has("nganh_nhap_hoc") or has("nganh"):
        _nganh_val = str_or_none(get("nganh_nhap_hoc", get("nganh")))
        if hasattr(Applicant, "nganh_nhap_hoc"):
            a.nganh_nhap_hoc = _nganh_val
        elif hasattr(Applicant, "nganh"):
            a.nganh = _nganh_val

    # üÜï c·∫≠p nh·∫≠t gi·ªõi t√≠nh (normalize)
    if "gioi_tinh" in body:
        a.gioi_tinh = _normalize_gender(body.get("gioi_tinh"))

    # üÜï c·∫≠p nh·∫≠t d√¢n t·ªôc
    if "dan_toc" in body and hasattr(Applicant, "dan_toc"):
        a.dan_toc = str_or_none(body.get("dan_toc"))

    # L∆∞u ng∆∞·ªùi c·∫≠p nh·∫≠t g·∫ßn nh·∫•t
    a.nguoi_nhan_ky_ten = getattr(me, "full_name", None) or getattr(me, "username", None)

    # C·∫≠p nh·∫≠t docs n·∫øu c√≥ g·ª≠i
    if has("docs"):
        existing = {
            d.code: d
            for d in db.query(ApplicantDoc).filter_by(applicant_ma_so_hv=a.ma_so_hv).all()
        }
        for d in (get("docs") or []):
            code = (d.get("code") if isinstance(d, dict) else getattr(d, "code", None)) or None
            sl = d.get("so_luong") if isinstance(d, dict) else getattr(d, "so_luong", None)
            if not code:
                continue
            try:
                n = int(sl or 0)
            except Exception:
                n = 0

            if n <= 0:
                if code in existing:
                    db.delete(existing[code])
            else:
                if code in existing:
                    existing[code].so_luong = n
                else:
                    db.add(ApplicantDoc(applicant_ma_so_hv=a.ma_so_hv, code=code, so_luong=n))

    db.commit()

    # t·∫°o diff docs
    docs_after = _docs_map(db, a.ma_so_hv)
    allc = set(docs_before) | set(docs_after)
    docs_diff = [
        {"code": c, "from": docs_before.get(c, 0), "to": docs_after.get(c, 0)}
        for c in sorted(allc)
        if docs_before.get(c, 0) != docs_after.get(c, 0)
    ]

    after = snapshot_applicant(a)

    # Ghi audit ƒë·∫ßy ƒë·ªß
    write_audit(
        db,
        action="UPDATE",
        target_type="Applicant",
        target_id=a.ma_so_hv,
        prev_values={**before, "docs_before": docs_before},
        new_values={
            **after,
            "docs_after": docs_after,
            "docs_diff": docs_diff,
            "update_reason": update_reason,
        },
        status="SUCCESS",
        request=request,
    )
    db.commit()

    return {
        "ok": True,
        "ma_so_hv": a.ma_so_hv,
        "ma_ho_so": a.ma_ho_so,
        "ho_ten": a.ho_ten,
    }


# ================= DELETE by MSSV (SOFT-DELETE, ch·ªâ c·∫ßn l√Ω do) =================
@router.delete("/{ma_so_hv}", status_code=status.HTTP_204_NO_CONTENT)
def delete_applicant(
    ma_so_hv: str,
    request: Request,
    body: dict | None = Body(None, embed=False),
    db: Session = Depends(get_db),
    me=Depends(require_roles("Admin", "NhanVien", "CongTacVien")),
):
    """
    Soft-delete: c·∫ßn {"reason": "..."} trong body.
    Tr·∫£ 204 No Content ƒë·ªÉ FE ·∫©n d√≤ng ngay, kh√¥ng c·∫ßn reload.
    """
    ensure_mssv(ma_so_hv)

    a = db.query(Applicant).filter(Applicant.ma_so_hv == ma_so_hv).first()
    if not a:
        raise HTTPException(404, "Applicant not found")

    # üü¶ L·∫•y snapshot + DOCS tr∆∞·ªõc khi x√≥a ‚Äî ƒë·ªÉ journal c√≥ c√°i hi·ªÉn th·ªã
    before = snapshot_applicant(a)
    docs_before = _docs_map(db, a.ma_so_hv)

    reason = (body or {}).get("reason") if isinstance(body, dict) else None
    if not reason or not str(reason).strip():
        raise HTTPException(400, "Thi·∫øu l√Ω do xo√° (reason)")
    reason = str(reason).strip()[:1000]

    # Idempotent: n·∫øu ƒë√£ c√≥ deleted_at th√¨ ch·ªâ c·∫≠p nh·∫≠t l√Ω do/ng∆∞·ªùi xo√°
    now = datetime.utcnow()
    if not getattr(a, "deleted_at", None):
        a.deleted_at = now

    # ƒê·∫∑t th√™m c√°c c·ªù ph·ªï bi·∫øn ƒë·ªÉ m·ªçi n∆°i ƒë·ªÅu b·∫Øt ƒë∆∞·ª£c xo√° m·ªÅm
    if hasattr(a, "status"):
        a.status = "deleted"
    if hasattr(a, "is_deleted"):
        a.is_deleted = True

    a.deleted_by = getattr(me, "full_name", None) or getattr(me, "username", None) or "ADMIN"
    a.deleted_reason = reason

    db.add(a)
    db.commit()

    # üßæ Ghi audit ƒë·∫ßy ƒë·ªß (k√®m docs_before)
    write_audit(
        db,
        action="DELETE_SOFT",
        target_type="Applicant",
        target_id=ma_so_hv,
        prev_values={**before, "docs_before": docs_before},
        new_values={
            "deleted_at": _to_iso(getattr(a, "deleted_at", None)),
            "deleted_by": getattr(a, "deleted_by", None),
            "deleted_reason": getattr(a, "deleted_reason", None),
        },
        status="SUCCESS",
        request=request,
    )
    db.commit()

    return Response(status_code=status.HTTP_204_NO_CONTENT)


# ================= PRINT (A4, A5) by MSSV =================
def _do_print(ma_so_hv: str, mark_printed: bool, db: Session, request: Request, a5: bool = False):
    from app.services.pdf_service import render_single_pdf, render_single_pdf_a5

    ensure_mssv(ma_so_hv)
    a = db.query(Applicant).filter(Applicant.ma_so_hv == ma_so_hv).first()
    if not a:
        raise HTTPException(404, "Applicant not found")

    # ‚õîÔ∏è Ch·∫∑n in n·∫øu ƒë√£ soft-delete
    if hasattr(Applicant, "deleted_at") and getattr(a, "deleted_at", None):
        raise HTTPException(410, "H·ªì s∆° ƒë√£ b·ªã xo√° t·∫°m, kh√¥ng th·ªÉ in.")

    q = db.query(ChecklistItem).filter(ChecklistItem.version_id == a.checklist_version_id)
    if hasattr(ChecklistItem, "order_no"):
        q = q.order_by(getattr(ChecklistItem, "order_no").asc())
    else:
        q = q.order_by(ChecklistItem.id.asc())
    items = q.all()

    docs = db.query(ApplicantDoc).filter(ApplicantDoc.applicant_ma_so_hv == a.ma_so_hv).all()
    pdf_bytes = (render_single_pdf_a5 if a5 else render_single_pdf)(a, items, docs)

    if mark_printed:
        a.printed = True
        a.status = "printed"
        db.commit()
        # log ƒë√°nh d·∫•u in
        write_audit(
            db,
            action="PRINT",
            target_type="Applicant",
            target_id=a.ma_so_hv,
            prev_values={},
            new_values={"printed": True, "a5": a5},
            status="SUCCESS",
            request=request,
        )
        db.commit()

    filename = f"HS_{a.ma_ho_so or a.ma_so_hv}{'_A5' if a5 else ''}.pdf"
    return StreamingResponse(
        io.BytesIO(pdf_bytes),
        media_type="application/pdf",
        headers={"Content-Disposition": f'inline; filename="{filename}"'},
    )


@router.get("/{ma_so_hv}/print")
def print_applicant_now(
    ma_so_hv: str,
    request: Request,
    mark_printed: bool = Query(False),
    db: Session = Depends(get_db),
):
    return _do_print(ma_so_hv, mark_printed, db, request=request, a5=False)


@router.post("/{ma_so_hv}/print")
def print_applicant_now_post(
    ma_so_hv: str,
    request: Request,
    mark_printed: bool = Query(True),
    db: Session = Depends(get_db),
):
    return _do_print(ma_so_hv, mark_printed, db, request=request, a5=False)


@router.get("/{ma_so_hv}/print-a5")
def print_applicant_a5(
    ma_so_hv: str,
    request: Request,
    mark_printed: bool = Query(False),
    db: Session = Depends(get_db),
):
    return _do_print(ma_so_hv, mark_printed, db, request=request, a5=True)


@router.post("/{ma_so_hv}/print-a5")
def print_applicant_a5_post(
    ma_so_hv: str,
    request: Request,
    mark_printed: bool = Query(True),
    db: Session = Depends(get_db),
):
    return _do_print(ma_so_hv, mark_printed, db, request=request, a5=True)


# ================= Recent =================
@router.get("/recent")
def get_recent_applicants(db: Session = Depends(get_db), limit: int = 50):
    rows = db.query(Applicant).order_by(Applicant.created_at.desc()).limit(limit).all()
    return [{"ma_so_hv": a.ma_so_hv, "ma_ho_so": a.ma_ho_so, "ho_ten": a.ho_ten} for a in rows]
