# app/routers/account.py
from pathlib import Path
from datetime import datetime, timezone, date

from fastapi import APIRouter, Depends, Request, Form
from fastapi.templating import Jinja2Templates
from fastapi.responses import RedirectResponse
from sqlalchemy.orm import Session

from app.db.session import get_db
from app.models.user import User
from app.routers.auth import require_user as require_login
from app.core.security import verify_password, hash_password

router = APIRouter()

# Tr·ªè th∆∞ m·ª•c template: <repo>/web
ROOT_DIR = Path(__file__).resolve().parents[2]
templates = Jinja2Templates(directory=str(ROOT_DIR / "web"))

# ---------------- Flash helpers ----------------
def _flash(request: Request, msg: str, level: str = "info"):
    """ƒê·∫∑t flash message (l∆∞u trong session; ƒë·ªçc m·ªôt l·∫ßn)"""
    request.session["_flash"] = {"message": msg, "level": level}

def _pop_flash(request: Request):
    """L·∫•y v√† x√≥a flash trong session"""
    return request.session.pop("_flash", None)

# ---------------- Views ----------------
@router.get("/account")
def account_view(
    request: Request,
    me: User = Depends(require_login),
    db: Session = Depends(get_db),
):
    """Trang th√¥ng tin t√†i kho·∫£n + form ƒë·ªïi m·∫≠t kh·∫©u.
    UI s·∫Ω t·ª± hi·ªÉn th·ªã nh·∫Øc ƒë·ªïi m·∫≠t kh·∫©u (kh√¥ng d√πng flash ·ªü BE)."""
    flash = _pop_flash(request)  # ch·ªâ d√πng cho c√°c th√¥ng b√°o th·∫≠t s·ª± (l·ªói/success)
    first = request.query_params.get("first") == "1"

    return templates.TemplateResponse(
        "account.html",
        {
            "request": request,
            "me": me,
            "flash": flash,  # c√≥ th·ªÉ None
            # c·ªù 'first' ƒë·ªÉ JS giao di·ªán t·ª± m·ªü form/hi·ªán nh·∫Øc
            "first": first,
            # (tu·ª≥ ch·ªçn) truy·ªÅn th√™m c·ªù must_change_password ƒë·ªÉ UI quy·∫øt ƒë·ªãnh
            "must_change_password": bool(getattr(me, "must_change_password", False)),
        },
    )

@router.post("/account/change-password")
def account_change_password(
    request: Request,
    old_password: str = Form(...),
    new_password: str = Form(...),
    confirm_password: str = Form(...),
    me: User = Depends(require_login),
    db: Session = Depends(get_db),
):
    """ƒê·ªïi m·∫≠t kh·∫©u t√†i kho·∫£n hi·ªán t·∫°i"""
    # Validate c∆° b·∫£n
    if len(new_password) < 6:
        _flash(request, "M·∫≠t kh·∫©u m·ªõi t·ªëi thi·ªÉu 6 k√Ω t·ª±!", "error")
        return RedirectResponse(url="/account", status_code=302)
    if new_password != confirm_password:
        _flash(request, "X√°c nh·∫≠n m·∫≠t kh·∫©u kh√¥ng kh·ªõp!", "error")
        return RedirectResponse(url="/account", status_code=302)
    if not verify_password(old_password, me.password_hash):
        _flash(request, "M·∫≠t kh·∫©u hi·ªán t·∫°i kh√¥ng ƒë√∫ng!", "error")
        return RedirectResponse(url="/account", status_code=302)

    # üõë Kh√¥ng cho tr√πng m·∫≠t kh·∫©u m·∫∑c ƒë·ªãnh sau reset
    # - N·∫øu reset_password_hash c√≥ gi√° tr·ªã -> d√πng n√≥
    # - N·∫øu ch∆∞a c√≥ m√† user v·∫´n ƒëang ·ªü tr·∫°ng th√°i "v·ª´a reset" (must_change_password=1
    #   v√† ch∆∞a t·ª´ng ƒë·ªïi password) -> fallback d√πng password_hash hi·ªán t·∫°i
    reset_hash = getattr(me, "reset_password_hash", None)
    if not reset_hash and getattr(me, "must_change_password", False) and not getattr(me, "password_changed_at", None):
        reset_hash = me.password_hash  # fallback an to√†n cho d·ªØ li·ªáu c≈© ch∆∞a populate

    if reset_hash:
        try:
            if verify_password(new_password, reset_hash):
                _flash(
                    request,
                    "M·∫≠t kh·∫©u m·ªõi kh√¥ng ƒë∆∞·ª£c tr√πng v·ªõi m·∫≠t kh·∫©u c≈©!",
                    "error",
                )
                return RedirectResponse(url="/account", status_code=302)
        except Exception:
            pass  # hash r·ªóng/h·ªèng -> b·ªè qua check thay v√¨ crash

    # L∆∞u DB
    try:
        me.password_hash = hash_password(new_password)
        me.must_change_password = False
        me.password_changed_at = datetime.now(timezone.utc)
        # ‚ùó KH√îNG x√≥a reset_password_hash: ti·∫øp t·ª•c c·∫•m d√πng l·∫°i m·∫≠t kh·∫©u reset c≈©
        db.commit()

        # ƒê·ªìng b·ªô session
        request.session["must_change_password"] = False

        _flash(request, "ƒê·ªïi m·∫≠t kh·∫©u th√†nh c√¥ng!", "success")
    except Exception:
        db.rollback()
        _flash(request, "Kh√¥ng th·ªÉ ƒë·ªïi m·∫≠t kh·∫©u. Vui l√≤ng th·ª≠ l·∫°i!", "error")

    return RedirectResponse(url="/account", status_code=302)

@router.post("/account/profile")
def account_update_profile(
    request: Request,
    full_name: str = Form(""),
    email: str = Form(""),
    dob: str = Form(""),
    me: User = Depends(require_login),
    db: Session = Depends(get_db),
):
    """C·∫≠p nh·∫≠t th√¥ng tin h·ªì s∆°: h·ªç t√™n, email, ng√†y sinh"""
    # Chu·∫©n h√≥a & ki·ªÉm tra unique email
    email_norm = (email or "").strip() or None
    if email_norm:
        dup = db.query(User).filter(User.email == email_norm, User.id != me.id).first()
        if dup:
            _flash(request, "Email ƒë√£ ƒë∆∞·ª£c d√πng b·ªüi t√†i kho·∫£n kh√°c.", "error")
            return RedirectResponse(url="/account", status_code=302)

    # Parse DOB n·∫øu c√≥ (YYYY-MM-DD)
    dob_val = None
    if dob:
        try:
            dob_val = date.fromisoformat(dob)
        except ValueError:
            _flash(request, "Ng√†y sinh kh√¥ng h·ª£p l·ªá!", "error")
            return RedirectResponse(url="/account", status_code=302)

    # L∆∞u DB
    try:
        me.full_name = (full_name or "").strip() or None
        me.email = email_norm
        me.dob = dob_val
        db.commit()
        _flash(request, "C·∫≠p nh·∫≠t th√¥ng tin t√†i kho·∫£n th√†nh c√¥ng!", "success")
    except Exception:
        db.rollback()
        _flash(request, "Kh√¥ng c·∫≠p nh·∫≠t ƒë∆∞·ª£c th√¥ng tin, vui l√≤ng th·ª≠ l·∫°i!", "error")

    return RedirectResponse(url="/account", status_code=302)
